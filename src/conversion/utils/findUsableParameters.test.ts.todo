
// TODO: [ðŸ‘œ] This probbably does not make sence because in TemplateJson already are listed dependencies

import { describe, expect, it } from '@jest/globals';
import { importPipeline } from '../validation/_importPipeline';
import { PipelineJson } from '../../types/PipelineJson/PipelineJson';
import { TemplateJson } from '../../types/PipelineJson/TemplateJson';
import { TemplateParameterJson } from '../../types/PipelineJson/TemplateParameterJson';

describe('how findUsableParameters works', () => {
    it('should find no usable parameter', () => {
        const promptbook = importPipeline(`50-advanced.ptbk.json`);
        const template = promptbook.templates[0];

        expect(findUsableParameters({ promptbook, template })).toBe([]);
    });
});

type FindUsableParametersOptions = {
    /**
     * Promptbook to search for usable parameters
     */
    promptbook: PipelineJson;

    /**
     * Template that searches for potentially usable parameters
     */
    template: TemplateJson;
};

/**
 * Function `findUsableParameters` will find all usable parameters for given template
 * In other words, it will find all parameters that are not used in the template itseld and all its dependencies
 */
export function findUsableParameters(options: FindUsableParametersOptions): ReadonlyArray<TemplateParameterJson> {
    const { promptbook, template } = options;

    const usableParameters: ReadonlyArray<TemplateParameterJson> = [];

    return usableParameters;
}
