import { describe, expect, it } from '@jest/globals';
import { readdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import { pipelineJsonToString } from './pipelineJsonToString';
import { pipelineStringToJson } from './pipelineStringToJson';
import { importPipeline } from './validation/_importPipeline';

describe('pipelineJsonToString', () => {
    const samplesDir = '../../samples/pipelines'; // <- TODO: [🚏] DRY, to config

    const samples = readdirSync(join(__dirname, samplesDir), { withFileTypes: true, recursive: false })
        //                         <- Note: In production it is not good practice to use synchronous functions
        //                                  But this is only a test before the build, so it is okay
        .filter((dirent) => dirent.isFile())
        .filter(({ name }) => name.endsWith('.ptbk.md'));

    for (const { name } of samples) {
        it(`convert json to string and back to same json ${name}`, () => {
            const pipelineJson = importPipeline(name as `${string}.ptbk.json`);
            const pipelineString = pipelineJsonToString(pipelineJson);
            const pipelineJson2 = await pipelineStringToJson(pipelineString, /* , { Use here mocked LLM } */);

            /**/
            writeFileSync(join(__dirname, samplesDir, name), stringifyPipelineJson(pipelineJson2), 'utf-8');
            // <- Note: In production it is not good practice to use synchronous functions
            //          But this is only a test before the build, so it is okay
            /**/

            expect(pipelineJson2).toEqual(pipelineJson);
        });
    }
});


